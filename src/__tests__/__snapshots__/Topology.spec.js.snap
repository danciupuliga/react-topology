// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Calls Quick Options 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Calls Title 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Drags 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Drags 2`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Drags 3`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Drags 4`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Drags node 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Mounts <Topology /> without throwing 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`Renders <Topology /> with mapped options 1`] = `
<svg
  class="src__Svg-bJmlXF kYyMeK"
  id="topology-svg"
>
  <g>
    <g
      transform="translate(83.57563533250558, 182.9879529463952)"
    >
      <rect
        class="sc-EHOje iqgaML"
        height="132"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX kTflvy"
        height="132"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM ifXwZD"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          Frontend really long frontend man
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              class="sc-gqjmRU jpVJfs"
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#494949"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs cCoJOK"
            x="54"
            y="14"
          >
            2 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          >
            <text
              class="sc-htoDjs leqbAV"
            >
              1
            running
            </text>
            <text
              class="sc-htoDjs gUuguu"
            >
              1
            failed
            </text>
          </g>
        </g>
      </g>
    </g>
    <g
      transform="translate(335.57755900824276, 181.51294748960126)"
    >
      <rect
        class="sc-EHOje iqgaML"
        height="114"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX kTflvy"
        height="114"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM ifXwZD"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          GraphQL
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              class="sc-gqjmRU jpVJfs"
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#494949"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs cCoJOK"
            x="54"
            y="14"
          >
            1 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          >
            <text
              class="sc-htoDjs leqbAV"
            >
              2
            running
            </text>
          </g>
        </g>
      </g>
    </g>
    <g
      transform="translate(210.86399952003126, 400.48903769074)"
    >
      <rect
        class="sc-EHOje iOzugQ"
        height="150"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX giahlJ"
        height="150"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM guGhPK"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          API
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb jkCBby"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb jkCBby"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#FFF"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs kkcWAN"
            x="54"
            y="14"
          >
            3 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          >
            <text
              class="sc-htoDjs jXErgE"
            >
              1
            running
            </text>
            <text
              class="sc-htoDjs jambxS"
            >
              1
            failed
            </text>
            <text
              class="sc-htoDjs jouoKU"
            >
              1
            unknown
            </text>
          </g>
        </g>
      </g>
    </g>
  </g>
  <g>
    <line
      class="sc-jTzLTM idusFa"
      x1="335.57755900824276"
      x2="263.5756353325056"
      y1="226.51294748960126"
      y2="227.9879529463952"
    />
    <line
      class="sc-jTzLTM idusFa"
      x1="388.86399952003126"
      x2="425.57755900824276"
      y1="402.48903769074"
      y2="295.5129474896013"
    />
  </g>
  <g>
    <g
      transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
    >
      <circle
        class="sc-fjdhpX eCDqlH"
        cx="0"
        cy="0"
        r="9"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="-3"
        y2="0"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="3"
        y2="0"
      />
    </g>
    <g
      transform="translate(425.57755900824276, 295.5129474896013) rotate(288.9419164207662)"
    >
      <circle
        class="sc-fjdhpX eCDqlH"
        cx="0"
        cy="0"
        r="9"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="-3"
        y2="0"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="3"
        y2="0"
      />
    </g>
  </g>
  <g />
  <g />
</svg>
`;

exports[`Renders <Topology /> without throwing 1`] = `
<svg
  class="src__Svg-bJmlXF kYyMeK"
  id="topology-svg"
>
  <g>
    <g
      transform="translate(83.57563533250558, 182.9879529463952)"
    >
      <rect
        class="sc-EHOje iqgaML"
        height="90"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX kTflvy"
        height="90"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM ifXwZD"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          Frontend really long frontend man
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              class="sc-gqjmRU jpVJfs"
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#494949"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs cCoJOK"
            x="54"
            y="14"
          >
            0 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          />
        </g>
      </g>
    </g>
    <g
      transform="translate(335.57755900824276, 181.51294748960126)"
    >
      <rect
        class="sc-EHOje iqgaML"
        height="90"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX kTflvy"
        height="90"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM ifXwZD"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          GraphQL
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI iDecSx"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb bvueHP"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              class="sc-gqjmRU jpVJfs"
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#494949"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs cCoJOK"
            x="54"
            y="14"
          >
            0 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          />
        </g>
      </g>
    </g>
    <g
      transform="translate(210.86399952003126, 400.48903769074)"
    >
      <rect
        class="sc-EHOje iOzugQ"
        height="90"
        width="180"
        x="0"
        y="3"
      />
      <rect
        class="sc-ifAKCX giahlJ"
        height="90"
        width="180"
        x="0"
        y="0"
      />
      <g>
        <text
          class="sc-bZQynM guGhPK"
          clip-path="url(#clip1)"
          x="12"
          y="30"
        >
          API
        </text>
        <clipPath
          id="clip1"
        >
          <rect
            height="40"
            width="120"
            x="12"
            y="5"
          />
        </clipPath>
      </g>
      <g
        transform="translate(140, 0)"
      >
        <line
          class="sc-bxivhb jkCBby"
          x1="0"
          x2="0"
          y1="0"
          y2="48"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="18"
          r="2"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="24"
          r="2"
        />
        <circle
          class="sc-iwsKbI LNooA"
          cx="20"
          cy="30"
          r="2"
        />
        <rect
          class="sc-dnqmqq kMHeTL"
          height="48"
          role="button"
          width="40"
        />
      </g>
      <g
        transform="translate(0, 48)"
      >
        <line
          class="sc-bxivhb jkCBby"
          x1="0"
          x2="180"
          y1="0"
          y2="0"
        />
        <g
          transform="translate(12, 11)"
        >
          <g
            transform="translate(0, 0)"
          >
            <svg
              class="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
              height="18"
              viewBox="0 0 18 18"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: state
              </title>
              <g
                fill-rule="evenodd"
              >
                <circle
                  cx="9"
                  cy="9"
                  r="9"
                />
                <path
                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                  fill="#FFF"
                />
              </g>
            </svg>
          </g>
          <g
            transform="translate(30, 4.5)"
          >
            <svg
              height="9"
              viewBox="0 0 18 9"
              width="18"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>
                icon: instances
              </title>
              <path
                d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                fill="#FFF"
                fill-rule="evenodd"
              />
            </svg>
          </g>
          <text
            class="sc-htoDjs kkcWAN"
            x="54"
            y="14"
          >
            0 inst.
          </text>
          <g
            height="200"
            transform="translate(54, 36)"
          />
        </g>
      </g>
    </g>
  </g>
  <g>
    <line
      class="sc-jTzLTM idusFa"
      x1="335.57755900824276"
      x2="263.5756353325056"
      y1="226.51294748960126"
      y2="227.9879529463952"
    />
    <line
      class="sc-jTzLTM idusFa"
      x1="388.86399952003126"
      x2="425.57755900824276"
      y1="402.48903769074"
      y2="271.5129474896013"
    />
  </g>
  <g>
    <g
      transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
    >
      <circle
        class="sc-fjdhpX eCDqlH"
        cx="0"
        cy="0"
        r="9"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="-3"
        y2="0"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="3"
        y2="0"
      />
    </g>
    <g
      transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
    >
      <circle
        class="sc-fjdhpX eCDqlH"
        cx="0"
        cy="0"
        r="9"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="-3"
        y2="0"
      />
      <line
        class="sc-jzJRlG ilIimZ"
        x1="-1"
        x2="2"
        y1="3"
        y2="0"
      />
    </g>
  </g>
  <g />
  <g />
</svg>
`;

exports[`Shallow <Topology /> without throwing 1`] = `
<src__Svg
  id="topology-svg"
  onMouseMove={[Function]}
  onMouseUp={[Function]}
  onTouchCancel={[Function]}
  onTouchEnd={[Function]}
  onTouchMove={[Function]}
  size={
    Object {
      "height": 600,
      "width": 600,
    }
  }
>
  <g>
    <GraphNode
      data={
        Object {
          "connections": Array [
            "aea06a05-830a-46d3-bdc1-9dcba97303de",
          ],
          "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
          "instancesActive": true,
          "instancesHealthy": Object {
            "healthy": 0,
            "total": 2,
          },
          "name": "Frontend really long frontend man",
          "nodeRect": Object {
            "bottom": 45,
            "height": 90,
            "left": -90,
            "right": 90,
            "top": -45,
            "width": 180,
          },
          "nodes": Array [
            Object {
              "count": 1,
              "status": "running",
            },
            Object {
              "count": 1,
              "status": "failed",
            },
          ],
          "reversed": true,
          "status": "active",
          "transitionalStatus": false,
          "x": 173.57563533250558,
          "y": 227.9879529463952,
        }
      }
      index={0}
      key="0"
      onDragStart={[Function]}
      onQuickActions={[Function]}
      onTitleClick={[Function]}
      primaryColor="#343434"
      secondaryColor="#FFF"
    />
    <GraphNode
      data={
        Object {
          "connections": Array [
            "af6a5cd2-291f-490b-bf3b-141b010635db",
          ],
          "id": "af6a5cd2-291f-490b-bf3b-asdasads",
          "instancesActive": true,
          "instancesHealthy": Object {
            "healthy": 2,
            "total": 2,
          },
          "name": "GraphQL",
          "nodeRect": Object {
            "bottom": 45,
            "height": 90,
            "left": -90,
            "right": 90,
            "top": -45,
            "width": 180,
          },
          "nodes": Array [
            Object {
              "count": 2,
              "status": "running",
            },
          ],
          "reversed": true,
          "status": "active",
          "transitionalStatus": false,
          "x": 425.57755900824276,
          "y": 226.51294748960126,
        }
      }
      index={1}
      key="1"
      onDragStart={[Function]}
      onQuickActions={[Function]}
      onTitleClick={[Function]}
      primaryColor="#343434"
      secondaryColor="#FFF"
    />
    <GraphNode
      data={
        Object {
          "connections": Array [
            "af6a5cd2-291f-490b-bf3b-asdasads",
          ],
          "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
          "instancesActive": true,
          "instancesHealthy": Object {
            "healthy": 2,
            "total": 3,
          },
          "name": "API",
          "nodeRect": Object {
            "bottom": 45,
            "height": 90,
            "left": -90,
            "right": 90,
            "top": -45,
            "width": 180,
          },
          "nodes": Array [
            Object {
              "count": 1,
              "status": "running",
            },
            Object {
              "count": 1,
              "status": "failed",
            },
            Object {
              "count": 1,
              "status": "unknown",
            },
          ],
          "reversed": false,
          "status": "active",
          "transitionalStatus": false,
          "x": 300.86399952003126,
          "y": 445.48903769074,
        }
      }
      index={2}
      key="2"
      onDragStart={[Function]}
      onQuickActions={[Function]}
      onTitleClick={[Function]}
      primaryColor="#343434"
      secondaryColor="#FFF"
    />
  </g>
  <g>
    <GraphLink
      data={
        Object {
          "arrowAngle": 178.8264234618929,
          "source": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-141b010635db",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-asdasads",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 2,
            },
            "name": "GraphQL",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 2,
                "status": "running",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 425.57755900824276,
            "y": 226.51294748960126,
          },
          "sourcePosition": Object {
            "id": "l",
            "x": 335.57755900824276,
            "y": 226.51294748960126,
          },
          "target": Object {
            "connections": Array [
              "aea06a05-830a-46d3-bdc1-9dcba97303de",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 0,
              "total": 2,
            },
            "name": "Frontend really long frontend man",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 1,
                "status": "running",
              },
              Object {
                "count": 1,
                "status": "failed",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 173.57563533250558,
            "y": 227.9879529463952,
          },
          "targetPosition": Object {
            "id": "r",
            "x": 263.5756353325056,
            "y": 227.9879529463952,
          },
        }
      }
      index={0}
      key="0"
    />
    <GraphLink
      data={
        Object {
          "arrowAngle": 285.6585742548238,
          "source": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-asdasads",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 3,
            },
            "name": "API",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 1,
                "status": "running",
              },
              Object {
                "count": 1,
                "status": "failed",
              },
              Object {
                "count": 1,
                "status": "unknown",
              },
            ],
            "reversed": false,
            "status": "active",
            "transitionalStatus": false,
            "x": 300.86399952003126,
            "y": 445.48903769074,
          },
          "sourcePosition": Object {
            "id": "tr",
            "x": 388.86399952003126,
            "y": 402.48903769074,
          },
          "target": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-141b010635db",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-asdasads",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 2,
            },
            "name": "GraphQL",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 2,
                "status": "running",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 425.57755900824276,
            "y": 226.51294748960126,
          },
          "targetPosition": Object {
            "id": "b",
            "x": 425.57755900824276,
            "y": 271.5129474896013,
          },
        }
      }
      index={1}
      key="1"
    />
  </g>
  <g>
    <GraphLinkArrow
      data={
        Object {
          "arrowAngle": 178.8264234618929,
          "source": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-141b010635db",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-asdasads",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 2,
            },
            "name": "GraphQL",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 2,
                "status": "running",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 425.57755900824276,
            "y": 226.51294748960126,
          },
          "sourcePosition": Object {
            "id": "l",
            "x": 335.57755900824276,
            "y": 226.51294748960126,
          },
          "target": Object {
            "connections": Array [
              "aea06a05-830a-46d3-bdc1-9dcba97303de",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 0,
              "total": 2,
            },
            "name": "Frontend really long frontend man",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 1,
                "status": "running",
              },
              Object {
                "count": 1,
                "status": "failed",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 173.57563533250558,
            "y": 227.9879529463952,
          },
          "targetPosition": Object {
            "id": "r",
            "x": 263.5756353325056,
            "y": 227.9879529463952,
          },
        }
      }
      index={0}
      key="0"
    />
    <GraphLinkArrow
      data={
        Object {
          "arrowAngle": 285.6585742548238,
          "source": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-asdasads",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 3,
            },
            "name": "API",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 1,
                "status": "running",
              },
              Object {
                "count": 1,
                "status": "failed",
              },
              Object {
                "count": 1,
                "status": "unknown",
              },
            ],
            "reversed": false,
            "status": "active",
            "transitionalStatus": false,
            "x": 300.86399952003126,
            "y": 445.48903769074,
          },
          "sourcePosition": Object {
            "id": "tr",
            "x": 388.86399952003126,
            "y": 402.48903769074,
          },
          "target": Object {
            "connections": Array [
              "af6a5cd2-291f-490b-bf3b-141b010635db",
            ],
            "id": "af6a5cd2-291f-490b-bf3b-asdasads",
            "instancesActive": true,
            "instancesHealthy": Object {
              "healthy": 2,
              "total": 2,
            },
            "name": "GraphQL",
            "nodeRect": Object {
              "bottom": 45,
              "height": 90,
              "left": -90,
              "right": 90,
              "top": -45,
              "width": 180,
            },
            "nodes": Array [
              Object {
                "count": 2,
                "status": "running",
              },
            ],
            "reversed": true,
            "status": "active",
            "transitionalStatus": false,
            "x": 425.57755900824276,
            "y": 226.51294748960126,
          },
          "targetPosition": Object {
            "id": "b",
            "x": 425.57755900824276,
            "y": 271.5129474896013,
          },
        }
      }
      index={1}
      key="1"
    />
  </g>
  <g />
  <g />
</src__Svg>
`;

exports[`mounts <Topology /> width colors 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="red"
  secondaryColor="blue"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="red"
          secondaryColor="blue"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="red"
              secondaryColor="blue"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX iUziLw"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  secondaryColor="blue"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM doJvys"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jIxmEG"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  role="button"
                  secondaryColor="blue"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jIxmEG"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="red"
                  secondaryColor="blue"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="red"
                      secondaryColor="blue"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs fdhVWh"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="red"
          secondaryColor="blue"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="red"
              secondaryColor="blue"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX iUziLw"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  secondaryColor="blue"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM doJvys"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jIxmEG"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI hSyixN"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  role="button"
                  secondaryColor="blue"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jIxmEG"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="red"
                  secondaryColor="blue"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="red"
                      secondaryColor="blue"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs fdhVWh"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="red"
          secondaryColor="blue"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="red"
              secondaryColor="blue"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX byJaxm"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  secondaryColor="blue"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM khpQKa"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb dSKHml"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI fgAMUy"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI fgAMUy"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="red"
                  r={2}
                  secondaryColor="blue"
                >
                  <circle
                    className="sc-iwsKbI fgAMUy"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="red"
                  role="button"
                  secondaryColor="blue"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="red"
              secondaryColor="blue"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="red"
                  secondaryColor="blue"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb dSKHml"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="red"
                  secondaryColor="blue"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="red"
                      secondaryColor="blue"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs hryaI"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`mounts <Topology /> with changing props 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={Array []}
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "aea06a05-830a-46d3-bdc1-9dcba97303de",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 0,
                "total": 2,
              },
              "name": "Frontend really long frontend man",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 173.57563533250558,
              "y": 227.9879529463952,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(83.57563533250558, 182.9879529463952)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    Frontend really long frontend man
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "aea06a05-830a-46d3-bdc1-9dcba97303de",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 0,
                    "total": 2,
                  },
                  "name": "Frontend really long frontend man",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 173.57563533250558,
                  "y": 227.9879529463952,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "aea06a05-830a-46d3-bdc1-9dcba97303de",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 0,
                        "total": 2,
                      },
                      "name": "Frontend really long frontend man",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 173.57563533250558,
                      "y": 227.9879529463952,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-141b010635db",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-asdasads",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 2,
              },
              "name": "GraphQL",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 2,
                  "status": "running",
                },
              ],
              "reversed": true,
              "status": "active",
              "transitionalStatus": false,
              "x": 425.57755900824276,
              "y": 226.51294748960126,
            }
          }
          index={1}
          key="1"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(335.57755900824276, 181.51294748960126)"
          >
            <styled.rect
              active={true}
              consul={true}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iqgaML"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={true}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX kTflvy"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={true}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM ifXwZD"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    GraphQL
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={1}
              instancesActive={true}
              isConsul={true}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={true}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI iDecSx"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-141b010635db",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 2,
                  },
                  "name": "GraphQL",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 2,
                      "status": "running",
                    },
                  ],
                  "reversed": true,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 425.57755900824276,
                  "y": 226.51294748960126,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={true}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb bvueHP"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-141b010635db",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 2,
                      },
                      "name": "GraphQL",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 2,
                          "status": "running",
                        },
                      ],
                      "reversed": true,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 425.57755900824276,
                      "y": 226.51294748960126,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={true}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT bRjBVL"
                          healthy={true}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={true}
                          >
                            <svg
                              className="sc-VigVT bRjBVL healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={true}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <Styled(InstancesIcon)
                        active={true}
                      >
                        <InstancesIcon
                          active={true}
                          className="sc-gqjmRU jpVJfs"
                        >
                          <svg
                            active={true}
                            className="sc-gqjmRU jpVJfs"
                            height="9"
                            viewBox="0 0 18 9"
                            width="18"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <title>
                              icon: instances
                            </title>
                            <path
                              d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                              fill="#494949"
                              fillRule="evenodd"
                            />
                          </svg>
                        </InstancesIcon>
                      </Styled(InstancesIcon)>
                    </g>
                    <styled.text
                      active={true}
                      consul={true}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs cCoJOK"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
        <GraphNode
          data={
            Object {
              "connections": Array [
                "af6a5cd2-291f-490b-bf3b-asdasads",
              ],
              "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
              "instancesActive": true,
              "instancesHealthy": Object {
                "healthy": 2,
                "total": 3,
              },
              "name": "API",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "nodes": Array [
                Object {
                  "count": 1,
                  "status": "running",
                },
                Object {
                  "count": 1,
                  "status": "failed",
                },
                Object {
                  "count": 1,
                  "status": "unknown",
                },
              ],
              "reversed": false,
              "status": "active",
              "transitionalStatus": false,
              "x": 300.86399952003126,
              "y": 445.48903769074,
            }
          }
          index={2}
          key="2"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(210.86399952003126, 400.48903769074)"
          >
            <styled.rect
              active={true}
              consul={false}
              height={90}
              width={180}
              x={0}
              y={3}
            >
              <rect
                className="sc-EHOje iOzugQ"
                height={90}
                width={180}
                x={0}
                y={3}
              />
            </styled.rect>
            <styled.rect
              active={true}
              connected={true}
              consul={false}
              height={90}
              onMouseDown={[Function]}
              onTouchStart={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX giahlJ"
                height={90}
                onMouseDown={[Function]}
                onTouchStart={[Function]}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={true}
                  clipPath="url(#clip1)"
                  consul={false}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM guGhPK"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    API
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={2}
              instancesActive={true}
              isConsul={false}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={true}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={true}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI LNooA"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "connections": Array [
                    "af6a5cd2-291f-490b-bf3b-asdasads",
                  ],
                  "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                  "instancesActive": true,
                  "instancesHealthy": Object {
                    "healthy": 2,
                    "total": 3,
                  },
                  "name": "API",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "nodes": Array [
                    Object {
                      "count": 1,
                      "status": "running",
                    },
                    Object {
                      "count": 1,
                      "status": "failed",
                    },
                    Object {
                      "count": 1,
                      "status": "unknown",
                    },
                  ],
                  "reversed": false,
                  "status": "active",
                  "transitionalStatus": false,
                  "x": 300.86399952003126,
                  "y": 445.48903769074,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={true}
                  consul={false}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb jkCBby"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "connections": Array [
                        "af6a5cd2-291f-490b-bf3b-asdasads",
                      ],
                      "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                      "instancesActive": true,
                      "instancesHealthy": Object {
                        "healthy": 2,
                        "total": 3,
                      },
                      "name": "API",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "nodes": Array [
                        Object {
                          "count": 1,
                          "status": "running",
                        },
                        Object {
                          "count": 1,
                          "status": "failed",
                        },
                        Object {
                          "count": 1,
                          "status": "unknown",
                        },
                      ],
                      "reversed": false,
                      "status": "active",
                      "transitionalStatus": false,
                      "x": 300.86399952003126,
                      "y": 445.48903769074,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={false}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={false}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={false}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={false}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={true}
                      consul={false}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs kkcWAN"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g>
        <GraphLink
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <styled.line
            x1={335.57755900824276}
            x2={263.5756353325056}
            y1={226.51294748960126}
            y2={227.9879529463952}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={335.57755900824276}
              x2={263.5756353325056}
              y1={226.51294748960126}
              y2={227.9879529463952}
            />
          </styled.line>
        </GraphLink>
        <GraphLink
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <styled.line
            x1={388.86399952003126}
            x2={425.57755900824276}
            y1={402.48903769074}
            y2={271.5129474896013}
          >
            <line
              className="sc-jTzLTM idusFa"
              x1={388.86399952003126}
              x2={425.57755900824276}
              y1={402.48903769074}
              y2={271.5129474896013}
            />
          </styled.line>
        </GraphLink>
      </g>
      <g>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 178.8264234618929,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "sourcePosition": Object {
                "id": "l",
                "x": 335.57755900824276,
                "y": 226.51294748960126,
              },
              "target": Object {
                "connections": Array [
                  "aea06a05-830a-46d3-bdc1-9dcba97303de",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 0,
                  "total": 2,
                },
                "name": "Frontend really long frontend man",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 173.57563533250558,
                "y": 227.9879529463952,
              },
              "targetPosition": Object {
                "id": "r",
                "x": 263.5756353325056,
                "y": 227.9879529463952,
              },
            }
          }
          index={0}
          key="0"
        >
          <g
            transform="translate(263.5756353325056, 227.9879529463952) rotate(178.8264234618929)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
        <GraphLinkArrow
          data={
            Object {
              "arrowAngle": 285.6585742548238,
              "source": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-asdasads",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 3,
                },
                "name": "API",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 1,
                    "status": "running",
                  },
                  Object {
                    "count": 1,
                    "status": "failed",
                  },
                  Object {
                    "count": 1,
                    "status": "unknown",
                  },
                ],
                "reversed": false,
                "status": "active",
                "transitionalStatus": false,
                "x": 300.86399952003126,
                "y": 445.48903769074,
              },
              "sourcePosition": Object {
                "id": "tr",
                "x": 388.86399952003126,
                "y": 402.48903769074,
              },
              "target": Object {
                "connections": Array [
                  "af6a5cd2-291f-490b-bf3b-141b010635db",
                ],
                "id": "af6a5cd2-291f-490b-bf3b-asdasads",
                "instancesActive": true,
                "instancesHealthy": Object {
                  "healthy": 2,
                  "total": 2,
                },
                "name": "GraphQL",
                "nodeRect": Object {
                  "bottom": 45,
                  "height": 90,
                  "left": -90,
                  "right": 90,
                  "top": -45,
                  "width": 180,
                },
                "nodes": Array [
                  Object {
                    "count": 2,
                    "status": "running",
                  },
                ],
                "reversed": true,
                "status": "active",
                "transitionalStatus": false,
                "x": 425.57755900824276,
                "y": 226.51294748960126,
              },
              "targetPosition": Object {
                "id": "b",
                "x": 425.57755900824276,
                "y": 271.5129474896013,
              },
            }
          }
          index={1}
          key="1"
        >
          <g
            transform="translate(425.57755900824276, 271.5129474896013) rotate(285.6585742548238)"
          >
            <styled.circle
              cx={0}
              cy={0}
              r={9}
            >
              <circle
                className="sc-fjdhpX eCDqlH"
                cx={0}
                cy={0}
                r={9}
              />
            </styled.circle>
            <styled.line
              x1={-1}
              x2={2}
              y1={-3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={-3}
                y2={0}
              />
            </styled.line>
            <styled.line
              x1={-1}
              x2={2}
              y1={3}
              y2={0}
            >
              <line
                className="sc-jzJRlG ilIimZ"
                x1={-1}
                x2={2}
                y1={3}
                y2={0}
              />
            </styled.line>
          </g>
        </GraphLinkArrow>
      </g>
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`mounts <Topology /> with changing props 2`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Array [
      Object {
        "connections": Array [
          "aea06a05-830a-46d3-bdc1-9dcba97303de",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635db",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 0,
          "total": 2,
        },
        "name": "Frontend really long frontend man",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-141b010635db",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-asdasads",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 2,
        },
        "name": "GraphQL",
        "nodes": Array [
          Object {
            "count": 2,
            "status": "running",
          },
        ],
        "reversed": true,
        "status": "active",
        "transitionalStatus": false,
      },
      Object {
        "connections": Array [
          "af6a5cd2-291f-490b-bf3b-asdasads",
        ],
        "id": "af6a5cd2-291f-490b-bf3b-141b010635dbs",
        "instancesActive": true,
        "instancesHealthy": Object {
          "healthy": 2,
          "total": 3,
        },
        "name": "API",
        "nodes": Array [
          Object {
            "count": 1,
            "status": "running",
          },
          Object {
            "count": 1,
            "status": "failed",
          },
          Object {
            "count": 1,
            "status": "unknown",
          },
        ],
        "reversed": false,
        "status": "active",
        "transitionalStatus": false,
      },
    ]
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "id": undefined,
              "name": "stuff",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "x": 0,
              "y": 0,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(0, 0)"
          >
            <styled.rect
              active={undefined}
              connected={false}
              consul={undefined}
              height={90}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX dAhpYQ"
                height={90}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "id": undefined,
                  "name": "stuff",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "x": 0,
                  "y": 0,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={undefined}
                  clipPath="url(#clip1)"
                  consul={undefined}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM kJkMva"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    stuff
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={undefined}
              isConsul={undefined}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={undefined}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb iZjiJy"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "id": undefined,
                  "name": "stuff",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "x": 0,
                  "y": 0,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={undefined}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb iZjiJy"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "id": undefined,
                      "name": "stuff",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "x": 0,
                      "y": 0,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={undefined}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={undefined}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={undefined}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={undefined}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={undefined}
                      consul={undefined}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs hyKgPc"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g />
      <g />
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`mounts <Topology /> with nothing 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={Array []}
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g />
      <g />
      <g />
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`mounts <Topology /> with only name 1`] = `
<Topology
  height={600}
  onQuickActionsClick={[Function]}
  onTitleClick={[Function]}
  primaryColor="#343434"
  secondaryColor="#FFF"
  services={
    Object {
      "name": "stuff",
    }
  }
  width={600}
>
  <src__Svg
    id="topology-svg"
    onMouseMove={[Function]}
    onMouseUp={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    size={
      Object {
        "height": 600,
        "width": 600,
      }
    }
  >
    <svg
      className="src__Svg-bJmlXF kYyMeK"
      id="topology-svg"
      onMouseMove={[Function]}
      onMouseUp={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      size={
        Object {
          "height": 600,
          "width": 600,
        }
      }
    >
      <g>
        <GraphNode
          data={
            Object {
              "id": undefined,
              "name": "stuff",
              "nodeRect": Object {
                "bottom": 45,
                "height": 90,
                "left": -90,
                "right": 90,
                "top": -45,
                "width": 180,
              },
              "x": 0,
              "y": 0,
            }
          }
          index={0}
          key="0"
          onDragStart={[Function]}
          onQuickActions={[Function]}
          onTitleClick={[Function]}
          primaryColor="#343434"
          secondaryColor="#FFF"
        >
          <g
            transform="translate(0, 0)"
          >
            <styled.rect
              active={undefined}
              connected={false}
              consul={undefined}
              height={90}
              primaryColor="#343434"
              secondaryColor="#FFF"
              width={180}
              x={0}
              y={0}
            >
              <rect
                className="sc-ifAKCX dAhpYQ"
                height={90}
                width={180}
                x={0}
                y={0}
              />
            </styled.rect>
            <GraphNodeTitle
              data={
                Object {
                  "id": undefined,
                  "name": "stuff",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "x": 0,
                  "y": 0,
                }
              }
              onTitleClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g>
                <styled.text
                  active={undefined}
                  clipPath="url(#clip1)"
                  consul={undefined}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x={12}
                  y={30}
                >
                  <text
                    className="sc-bZQynM kJkMva"
                    clipPath="url(#clip1)"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    x={12}
                    y={30}
                  >
                    stuff
                  </text>
                </styled.text>
                <clipPath
                  id="clip1"
                >
                  <rect
                    height="40"
                    width="120"
                    x={12}
                    y="5"
                  />
                </clipPath>
              </g>
            </GraphNodeTitle>
            <NodeButton
              index={0}
              instancesActive={undefined}
              isConsul={undefined}
              onButtonClick={[Function]}
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(140, 0)"
              >
                <styled.line
                  active={undefined}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={0}
                  y1={0}
                  y2={48}
                >
                  <line
                    className="sc-bxivhb iZjiJy"
                    x1={0}
                    x2={0}
                    y1={0}
                    y2={48}
                  />
                </styled.line>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={18}
                  key="0"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={18}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={24}
                  key="1"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={24}
                    r={2}
                  />
                </styled.circle>
                <styled.circle
                  active={undefined}
                  consul={undefined}
                  cx={20}
                  cy={30}
                  key="2"
                  primaryColor="#343434"
                  r={2}
                  secondaryColor="#FFF"
                >
                  <circle
                    className="sc-iwsKbI jsBKmT"
                    cx={20}
                    cy={30}
                    r={2}
                  />
                </styled.circle>
                <styled.rect
                  height={48}
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  primaryColor="#343434"
                  role="button"
                  secondaryColor="#FFF"
                  width={40}
                >
                  <rect
                    className="sc-dnqmqq kMHeTL"
                    height={48}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    role="button"
                    width={40}
                  />
                </styled.rect>
              </g>
            </NodeButton>
            <GraphNodeContent
              data={
                Object {
                  "id": undefined,
                  "name": "stuff",
                  "nodeRect": Object {
                    "bottom": 45,
                    "height": 90,
                    "left": -90,
                    "right": 90,
                    "top": -45,
                    "width": 180,
                  },
                  "x": 0,
                  "y": 0,
                }
              }
              primaryColor="#343434"
              secondaryColor="#FFF"
            >
              <g
                transform="translate(0, 48)"
              >
                <styled.line
                  active={undefined}
                  consul={undefined}
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                  x1={0}
                  x2={180}
                  y1={0}
                  y2={0}
                >
                  <line
                    className="sc-bxivhb iZjiJy"
                    x1={0}
                    x2={180}
                    y1={0}
                    y2={0}
                  />
                </styled.line>
                <GraphNodeInfo
                  data={
                    Object {
                      "id": undefined,
                      "name": "stuff",
                      "nodeRect": Object {
                        "bottom": 45,
                        "height": 90,
                        "left": -90,
                        "right": 90,
                        "top": -45,
                        "width": 180,
                      },
                      "x": 0,
                      "y": 0,
                    }
                  }
                  pos={
                    Object {
                      "x": 12,
                      "y": 11,
                    }
                  }
                  primaryColor="#343434"
                  secondaryColor="#FFF"
                >
                  <g
                    transform="translate(12, 11)"
                  >
                    <g
                      transform="translate(0, 0)"
                    >
                      <Styled(healthy__StyledHealthyIcon)
                        healthy={undefined}
                      >
                        <healthy__StyledHealthyIcon
                          className="sc-VigVT esakGZ"
                          healthy={undefined}
                          innerRef={undefined}
                        >
                          <HealthyIcon
                            className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                            healthy={undefined}
                          >
                            <svg
                              className="sc-VigVT esakGZ healthy__StyledHealthyIcon-EmIZP iBQdnE"
                              healthy={undefined}
                              height="18"
                              viewBox="0 0 18 18"
                              width="18"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <title>
                                icon: state
                              </title>
                              <g
                                fillRule="evenodd"
                              >
                                <circle
                                  cx="9"
                                  cy="9"
                                  r="9"
                                />
                                <path
                                  d="M9.477 6.603l-.522.443-.444-.443a2.056 2.056 0 1 0-2.908 2.909l3.352 3.352 3.412-3.352c.803-.804.863-2.106.06-2.91a2.105 2.105 0 0 0-2.95 0z"
                                  fill="#FFF"
                                />
                              </g>
                            </svg>
                          </HealthyIcon>
                        </healthy__StyledHealthyIcon>
                      </Styled(healthy__StyledHealthyIcon)>
                    </g>
                    <g
                      transform="translate(30, 4.5)"
                    >
                      <InstancesIconLight>
                        <svg
                          height="9"
                          viewBox="0 0 18 9"
                          width="18"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <title>
                            icon: instances
                          </title>
                          <path
                            d="M4.5 0a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m8.59 0c-.375 0-.739.047-1.09.12 2.184.456 3.818 2.239 3.818 4.38S14.184 8.424 12 8.88c.351.073.715.12 1.09.12C15.803 9 18 6.985 18 4.5S15.802 0 13.09 0M14 4.5C14 6.985 11.802 9 9.09 9c-.375 0-.739-.047-1.09-.12 2.184-.456 3.818-2.239 3.818-4.38S10.184.576 8 .12C8.351.047 8.715 0 9.09 0 11.803 0 14 2.015 14 4.5"
                            fill="#FFF"
                            fillRule="evenodd"
                          />
                        </svg>
                      </InstancesIconLight>
                    </g>
                    <styled.text
                      active={undefined}
                      consul={undefined}
                      primaryColor="#343434"
                      secondaryColor="#FFF"
                      x={54}
                      y={14}
                    >
                      <text
                        className="sc-htoDjs hyKgPc"
                        x={54}
                        y={14}
                      >
                        0 inst.
                      </text>
                    </styled.text>
                    <g
                      height="200"
                      transform="translate(54, 36)"
                    />
                  </g>
                </GraphNodeInfo>
              </g>
            </GraphNodeContent>
          </g>
        </GraphNode>
      </g>
      <g />
      <g />
      <g />
      <g />
    </svg>
  </src__Svg>
</Topology>
`;

exports[`removes eventListeners on unmount 1`] = `""`;
