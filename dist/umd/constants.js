"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
const Lengths = {
  paddingLeft: 12,
  nodeWidth: 180,
  statusHeight: 18
};

const Sizes = {
  buttonSize: {
    width: 40,
    height: 48
  },
  contentSize: {
    width: Lengths.nodeWidth,
    // height: 101 // This is the height w/o info comp
    height: 42
  },
  childContentSize: {
    width: Lengths.nodeWidth,
    height: 60
  },
  nodeSize: {
    width: Lengths.nodeWidth,
    // height: 156
    height: 90
  },
  nodeSizeWithChildren: {
    width: Lengths.nodeWidth,
    // height: 276
    height: 176
  }
};

const Points = {
  buttonPosition: {
    x: Lengths.nodeWidth - Sizes.buttonSize.width,
    y: 0
  },
  contentPosition: {
    x: 0,
    y: Sizes.buttonSize.height
  },
  infoPosition: {
    x: Lengths.paddingLeft,
    y: 11
  },
  metricsPosition: {
    x: Lengths.paddingLeft,
    y: 41
  },
  subtitlePosition: {
    x: Lengths.paddingLeft,
    y: 23
  }
};

const Rects = {
  // X, y, width, height
  buttonRect: Object.assign({}, Sizes.buttonSize, Points.buttonPosition),
  contentRect: Object.assign({}, Sizes.contentSize, Points.contentPosition),
  childContentRect: Object.assign({}, Sizes.childContentSize, Points.contentPosition),
  // Top, bottom, left, right - from 'centre'
  nodeRect: Object.assign({}, Sizes.nodeSize, {
    left: -Sizes.nodeSize.width / 2,
    right: Sizes.nodeSize.width / 2,
    top: -Sizes.nodeSize.height / 2,
    bottom: Sizes.nodeSize.height / 2
  }),
  nodeRectWithChildren: Object.assign({}, Sizes.nodeSizeWithChildren, {
    left: -Sizes.nodeSizeWithChildren.width / 2,
    right: Sizes.nodeSizeWithChildren.width / 2,
    top: -Sizes.nodeSizeWithChildren.height / 2 + Sizes.contentSize.height / 3,
    bottom: Sizes.nodeSizeWithChildren.height / 2 + Sizes.contentSize.height / 3
  })
};

const Constants = Object.assign({}, Lengths, Sizes, Points, Rects);

exports.default = Constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiTGVuZ3RocyIsInBhZGRpbmdMZWZ0Iiwibm9kZVdpZHRoIiwic3RhdHVzSGVpZ2h0IiwiU2l6ZXMiLCJidXR0b25TaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjb250ZW50U2l6ZSIsImNoaWxkQ29udGVudFNpemUiLCJub2RlU2l6ZSIsIm5vZGVTaXplV2l0aENoaWxkcmVuIiwiUG9pbnRzIiwiYnV0dG9uUG9zaXRpb24iLCJ4IiwieSIsImNvbnRlbnRQb3NpdGlvbiIsImluZm9Qb3NpdGlvbiIsIm1ldHJpY3NQb3NpdGlvbiIsInN1YnRpdGxlUG9zaXRpb24iLCJSZWN0cyIsImJ1dHRvblJlY3QiLCJjb250ZW50UmVjdCIsImNoaWxkQ29udGVudFJlY3QiLCJub2RlUmVjdCIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm5vZGVSZWN0V2l0aENoaWxkcmVuIiwiQ29uc3RhbnRzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLFVBQVU7QUFDZEMsZUFBYSxFQURDO0FBRWRDLGFBQVcsR0FGRztBQUdkQyxnQkFBYztBQUhBLENBQWhCOztBQU1BLE1BQU1DLFFBQVE7QUFDWkMsY0FBWTtBQUNWQyxXQUFPLEVBREc7QUFFVkMsWUFBUTtBQUZFLEdBREE7QUFLWkMsZUFBYTtBQUNYRixXQUFPTixRQUFRRSxTQURKO0FBRVg7QUFDQUssWUFBUTtBQUhHLEdBTEQ7QUFVWkUsb0JBQWtCO0FBQ2hCSCxXQUFPTixRQUFRRSxTQURDO0FBRWhCSyxZQUFRO0FBRlEsR0FWTjtBQWNaRyxZQUFVO0FBQ1JKLFdBQU9OLFFBQVFFLFNBRFA7QUFFUjtBQUNBSyxZQUFRO0FBSEEsR0FkRTtBQW1CWkksd0JBQXNCO0FBQ3BCTCxXQUFPTixRQUFRRSxTQURLO0FBRXBCO0FBQ0FLLFlBQVE7QUFIWTtBQW5CVixDQUFkOztBQTBCQSxNQUFNSyxTQUFTO0FBQ2JDLGtCQUFnQjtBQUNkQyxPQUFHZCxRQUFRRSxTQUFSLEdBQW9CRSxNQUFNQyxVQUFOLENBQWlCQyxLQUQxQjtBQUVkUyxPQUFHO0FBRlcsR0FESDtBQUtiQyxtQkFBaUI7QUFDZkYsT0FBRyxDQURZO0FBRWZDLE9BQUdYLE1BQU1DLFVBQU4sQ0FBaUJFO0FBRkwsR0FMSjtBQVNiVSxnQkFBYztBQUNaSCxPQUFHZCxRQUFRQyxXQURDO0FBRVpjLE9BQUc7QUFGUyxHQVREO0FBYWJHLG1CQUFpQjtBQUNmSixPQUFHZCxRQUFRQyxXQURJO0FBRWZjLE9BQUc7QUFGWSxHQWJKO0FBaUJiSSxvQkFBa0I7QUFDaEJMLE9BQUdkLFFBQVFDLFdBREs7QUFFaEJjLE9BQUc7QUFGYTtBQWpCTCxDQUFmOztBQXVCQSxNQUFNSyxRQUFRO0FBQ1o7QUFDQUMsZ0NBQ0tqQixNQUFNQyxVQURYLEVBRUtPLE9BQU9DLGNBRlosQ0FGWTtBQU1aUyxpQ0FDS2xCLE1BQU1JLFdBRFgsRUFFS0ksT0FBT0ksZUFGWixDQU5ZO0FBVVpPLHNDQUNLbkIsTUFBTUssZ0JBRFgsRUFFS0csT0FBT0ksZUFGWixDQVZZO0FBY1o7QUFDQVEsOEJBQ0twQixNQUFNTSxRQURYO0FBRUVlLFVBQU0sQ0FBQ3JCLE1BQU1NLFFBQU4sQ0FBZUosS0FBaEIsR0FBd0IsQ0FGaEM7QUFHRW9CLFdBQU90QixNQUFNTSxRQUFOLENBQWVKLEtBQWYsR0FBdUIsQ0FIaEM7QUFJRXFCLFNBQUssQ0FBQ3ZCLE1BQU1NLFFBQU4sQ0FBZUgsTUFBaEIsR0FBeUIsQ0FKaEM7QUFLRXFCLFlBQVF4QixNQUFNTSxRQUFOLENBQWVILE1BQWYsR0FBd0I7QUFMbEMsSUFmWTtBQXNCWnNCLDBDQUNLekIsTUFBTU8sb0JBRFg7QUFFRWMsVUFBTSxDQUFDckIsTUFBTU8sb0JBQU4sQ0FBMkJMLEtBQTVCLEdBQW9DLENBRjVDO0FBR0VvQixXQUFPdEIsTUFBTU8sb0JBQU4sQ0FBMkJMLEtBQTNCLEdBQW1DLENBSDVDO0FBSUVxQixTQUFLLENBQUN2QixNQUFNTyxvQkFBTixDQUEyQkosTUFBNUIsR0FBcUMsQ0FBckMsR0FBeUNILE1BQU1JLFdBQU4sQ0FBa0JELE1BQWxCLEdBQTJCLENBSjNFO0FBS0VxQixZQUFReEIsTUFBTU8sb0JBQU4sQ0FBMkJKLE1BQTNCLEdBQW9DLENBQXBDLEdBQXdDSCxNQUFNSSxXQUFOLENBQWtCRCxNQUFsQixHQUEyQjtBQUw3RTtBQXRCWSxDQUFkOztBQStCQSxNQUFNdUIsOEJBQ0Q5QixPQURDLEVBRURJLEtBRkMsRUFHRFEsTUFIQyxFQUlEUSxLQUpDLENBQU47O2tCQU9lVSxTIiwiZmlsZSI6ImNvbnN0YW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IExlbmd0aHMgPSB7XG4gIHBhZGRpbmdMZWZ0OiAxMixcbiAgbm9kZVdpZHRoOiAxODAsXG4gIHN0YXR1c0hlaWdodDogMThcbn07XG5cbmNvbnN0IFNpemVzID0ge1xuICBidXR0b25TaXplOiB7XG4gICAgd2lkdGg6IDQwLFxuICAgIGhlaWdodDogNDhcbiAgfSxcbiAgY29udGVudFNpemU6IHtcbiAgICB3aWR0aDogTGVuZ3Rocy5ub2RlV2lkdGgsXG4gICAgLy8gaGVpZ2h0OiAxMDEgLy8gVGhpcyBpcyB0aGUgaGVpZ2h0IHcvbyBpbmZvIGNvbXBcbiAgICBoZWlnaHQ6IDQyXG4gIH0sXG4gIGNoaWxkQ29udGVudFNpemU6IHtcbiAgICB3aWR0aDogTGVuZ3Rocy5ub2RlV2lkdGgsXG4gICAgaGVpZ2h0OiA2MFxuICB9LFxuICBub2RlU2l6ZToge1xuICAgIHdpZHRoOiBMZW5ndGhzLm5vZGVXaWR0aCxcbiAgICAvLyBoZWlnaHQ6IDE1NlxuICAgIGhlaWdodDogOTBcbiAgfSxcbiAgbm9kZVNpemVXaXRoQ2hpbGRyZW46IHtcbiAgICB3aWR0aDogTGVuZ3Rocy5ub2RlV2lkdGgsXG4gICAgLy8gaGVpZ2h0OiAyNzZcbiAgICBoZWlnaHQ6IDE3NlxuICB9XG59O1xuXG5jb25zdCBQb2ludHMgPSB7XG4gIGJ1dHRvblBvc2l0aW9uOiB7XG4gICAgeDogTGVuZ3Rocy5ub2RlV2lkdGggLSBTaXplcy5idXR0b25TaXplLndpZHRoLFxuICAgIHk6IDBcbiAgfSxcbiAgY29udGVudFBvc2l0aW9uOiB7XG4gICAgeDogMCxcbiAgICB5OiBTaXplcy5idXR0b25TaXplLmhlaWdodFxuICB9LFxuICBpbmZvUG9zaXRpb246IHtcbiAgICB4OiBMZW5ndGhzLnBhZGRpbmdMZWZ0LFxuICAgIHk6IDExXG4gIH0sXG4gIG1ldHJpY3NQb3NpdGlvbjoge1xuICAgIHg6IExlbmd0aHMucGFkZGluZ0xlZnQsXG4gICAgeTogNDFcbiAgfSxcbiAgc3VidGl0bGVQb3NpdGlvbjoge1xuICAgIHg6IExlbmd0aHMucGFkZGluZ0xlZnQsXG4gICAgeTogMjNcbiAgfVxufTtcblxuY29uc3QgUmVjdHMgPSB7XG4gIC8vIFgsIHksIHdpZHRoLCBoZWlnaHRcbiAgYnV0dG9uUmVjdDoge1xuICAgIC4uLlNpemVzLmJ1dHRvblNpemUsXG4gICAgLi4uUG9pbnRzLmJ1dHRvblBvc2l0aW9uXG4gIH0sXG4gIGNvbnRlbnRSZWN0OiB7XG4gICAgLi4uU2l6ZXMuY29udGVudFNpemUsXG4gICAgLi4uUG9pbnRzLmNvbnRlbnRQb3NpdGlvblxuICB9LFxuICBjaGlsZENvbnRlbnRSZWN0OiB7XG4gICAgLi4uU2l6ZXMuY2hpbGRDb250ZW50U2l6ZSxcbiAgICAuLi5Qb2ludHMuY29udGVudFBvc2l0aW9uXG4gIH0sXG4gIC8vIFRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCAtIGZyb20gJ2NlbnRyZSdcbiAgbm9kZVJlY3Q6IHtcbiAgICAuLi5TaXplcy5ub2RlU2l6ZSxcbiAgICBsZWZ0OiAtU2l6ZXMubm9kZVNpemUud2lkdGggLyAyLFxuICAgIHJpZ2h0OiBTaXplcy5ub2RlU2l6ZS53aWR0aCAvIDIsXG4gICAgdG9wOiAtU2l6ZXMubm9kZVNpemUuaGVpZ2h0IC8gMixcbiAgICBib3R0b206IFNpemVzLm5vZGVTaXplLmhlaWdodCAvIDJcbiAgfSxcbiAgbm9kZVJlY3RXaXRoQ2hpbGRyZW46IHtcbiAgICAuLi5TaXplcy5ub2RlU2l6ZVdpdGhDaGlsZHJlbixcbiAgICBsZWZ0OiAtU2l6ZXMubm9kZVNpemVXaXRoQ2hpbGRyZW4ud2lkdGggLyAyLFxuICAgIHJpZ2h0OiBTaXplcy5ub2RlU2l6ZVdpdGhDaGlsZHJlbi53aWR0aCAvIDIsXG4gICAgdG9wOiAtU2l6ZXMubm9kZVNpemVXaXRoQ2hpbGRyZW4uaGVpZ2h0IC8gMiArIFNpemVzLmNvbnRlbnRTaXplLmhlaWdodCAvIDMsXG4gICAgYm90dG9tOiBTaXplcy5ub2RlU2l6ZVdpdGhDaGlsZHJlbi5oZWlnaHQgLyAyICsgU2l6ZXMuY29udGVudFNpemUuaGVpZ2h0IC8gM1xuICB9XG59O1xuXG5jb25zdCBDb25zdGFudHMgPSB7XG4gIC4uLkxlbmd0aHMsXG4gIC4uLlNpemVzLFxuICAuLi5Qb2ludHMsXG4gIC4uLlJlY3RzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb25zdGFudHM7XG4iXX0=