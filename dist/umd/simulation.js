'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSimulation = exports.createSimulation = undefined;

var _d = require('d3');

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const hypotenuse = (a, b) => Math.sqrt(a * a + b * b);

const rectRadius = ({ width, height }) => Math.round(hypotenuse(width, height) / 2);

const forcePlayAnimation = (simulation, animationTicks) => {
  const n = Math.ceil(Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())) + 100; // - animationTicks;

  for (let i = 0; i < n; ++i) {
    simulation.tick();
  }
};

const createLinks = services => services.reduce((acc, service, index) => service.connections ? acc.concat(service.connections.reduce((connections, connection, index) => {
  const targetExists = services.filter(service => service.id === connection).length;
  if (targetExists) {
    connections.push({
      source: service.id,
      target: connection
    });
  }
  return connections;
}, [])) : acc, []);

const createSimulation = (services, svgSize, animationTicks = 0) => {
  // This is not going to work given that as well as the d3 layout stuff, other things might be at play too
  // We should pass two objects to the components - one for positioning and one for data
  const nodes = services.map((service, index) => {
    return {
      id: service.id,
      index
    };
  });

  const links = createLinks(services);

  const { width, height } = svgSize;

  const nodeRadius = rectRadius(_constants2.default.nodeSizeWithChildren);

  const simulation = (0, _d.forceSimulation)(nodes).force('link', (0, _d.forceLink)(links).id(d => d.id)).force('collide', (0, _d.forceCollide)(nodeRadius)).force('center', (0, _d.forceCenter)(width / 2, height / 2));

  forcePlayAnimation(simulation, animationTicks);

  return {
    nodes,
    links,
    simulation
  };
};

const updateSimulation = (simulation, services, simNodes, simLinks, svgSize, onTick, onEnd) => {
  const nodes = services.map((service, index) => {
    const simNode = simNodes.reduce((acc, n, i) => {
      return service.id === n.id ? n : acc;
    }, null);

    return simNode ? {
      id: simNode.id,
      index
    } : {
      id: service.id,
      index
    };
  });

  const links = createLinks(services);

  const { width, height } = svgSize;

  const nodeRadius = rectRadius(_constants2.default.nodeSizeWithChildren);

  return {
    simulation: (0, _d.forceSimulation)(nodes).force('link', (0, _d.forceLink)(links).id(d => d.id)).force('collide', (0, _d.forceCollide)(nodeRadius)).force('center', (0, _d.forceCenter)(width / 2, height / 2)).on('tick', onTick).on('end', onEnd),
    nodes,
    links
  };
};

exports.createSimulation = createSimulation;
exports.updateSimulation = updateSimulation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,