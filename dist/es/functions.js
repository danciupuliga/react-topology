import Constants from './constants';

var getAngleFromPoints = function getAngleFromPoints(source, target) {
  var lineAngle = Math.atan2(target.y - source.y, target.x - source.x);
  var lineAngleDeg = lineAngle * 180 / Math.PI;
  var zeroToThreeSixty = lineAngleDeg < 0 ? 360 + lineAngleDeg : lineAngleDeg;

  return zeroToThreeSixty;
};

var getPosition = function getPosition(angle, positions, position) {
  var noCorners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var positionIndex = noCorners ? Math.round(angle / 90) * 2 : Math.round(angle / 45);

  var offsetPosition = positions[positionIndex];

  return {
    id: offsetPosition.id,
    x: position.x + offsetPosition.x,
    y: position.y + offsetPosition.y
  };
};

var getPositions = function getPositions(rect) {
  var halfCorner = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return [{
    id: 'r',
    x: rect.right,
    y: 0
  }, {
    id: 'br',
    x: rect.right - halfCorner,
    y: rect.bottom - halfCorner
  }, {
    id: 'b',
    x: 0,
    y: rect.bottom
  }, {
    id: 'bl',
    x: rect.left + halfCorner,
    y: rect.bottom - halfCorner
  }, {
    id: 'l',
    x: rect.left,
    y: 0
  }, {
    id: 'tl',
    x: rect.left + halfCorner,
    y: rect.top + halfCorner
  }, {
    id: 't',
    x: 0,
    y: rect.top
  }, {
    id: 'tr',
    x: rect.right - halfCorner,
    y: rect.top + halfCorner
  }, {
    id: 'r',
    x: rect.right,
    y: 0
  }];
};

var calculateLineLayout = function calculateLineLayout(_ref) {
  var source = _ref.source,
      target = _ref.target;

  // Actually, this will need to be got dynamically, in case them things are different sizes
  // yeah right, now you'll get to do exactly that

  var halfCorner = 2;

  var sourcePositions = getPositions(source.nodeRect, halfCorner);
  var sourceAngle = getAngleFromPoints(source, target);
  var sourcePosition = getPosition(sourceAngle, sourcePositions, source);

  var targetPositions = getPositions(target.nodeRect, halfCorner);
  var targetAngle = getAngleFromPoints(target, sourcePosition);
  var targetPosition = getPosition(targetAngle, targetPositions, target); // , true);

  var arrowAngle = getAngleFromPoints(sourcePosition, targetPosition);

  return {
    source: source,
    target: target,
    sourcePosition: sourcePosition,
    targetPosition: targetPosition,
    arrowAngle: arrowAngle
  };
};

var getStatusesLength = function getStatusesLength(data) {
  return data.transitionalStatus ? 1 : data.instanceStatuses.length;
};

var getStatusesHeight = function getStatusesHeight(data) {
  var statuses = data.children ? data.children.reduce(function (statuses, child) {
    return statuses + getStatusesLength(child);
  }, 0) : getStatusesLength(data);

  return statuses ? Constants.statusHeight * statuses + 6 : 0;
};

var getContentRect = function getContentRect(data) {
  var isChild = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var contentSize = isChild ? Constants.childContentSize : Constants.contentSize;

  var height = contentSize.height;

  var contentHeight = height + getStatusesHeight(data);

  return Object.assign({}, Constants.contentPosition, {
    width: contentSize.width,
    height: contentHeight
  });
};

var getNodeRect = function getNodeRect(data) {
  var nodeSize = data.children ? Constants.nodeSizeWithChildren : Constants.nodeSize;

  var width = nodeSize.width,
      height = nodeSize.height;

  var nodeHeight = height + getStatusesHeight(data);

  return {
    left: -width / 2,
    right: width / 2,
    top: -height / 2,
    bottom: nodeHeight - height / 2,
    width: width,
    height: nodeHeight
  };
};

export { getContentRect, getNodeRect, calculateLineLayout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mdW5jdGlvbnMuanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiZ2V0QW5nbGVGcm9tUG9pbnRzIiwic291cmNlIiwidGFyZ2V0IiwibGluZUFuZ2xlIiwiTWF0aCIsImF0YW4yIiwieSIsIngiLCJsaW5lQW5nbGVEZWciLCJQSSIsInplcm9Ub1RocmVlU2l4dHkiLCJnZXRQb3NpdGlvbiIsImFuZ2xlIiwicG9zaXRpb25zIiwicG9zaXRpb24iLCJub0Nvcm5lcnMiLCJwb3NpdGlvbkluZGV4Iiwicm91bmQiLCJvZmZzZXRQb3NpdGlvbiIsImlkIiwiZ2V0UG9zaXRpb25zIiwicmVjdCIsImhhbGZDb3JuZXIiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ0b3AiLCJjYWxjdWxhdGVMaW5lTGF5b3V0Iiwic291cmNlUG9zaXRpb25zIiwibm9kZVJlY3QiLCJzb3VyY2VBbmdsZSIsInNvdXJjZVBvc2l0aW9uIiwidGFyZ2V0UG9zaXRpb25zIiwidGFyZ2V0QW5nbGUiLCJ0YXJnZXRQb3NpdGlvbiIsImFycm93QW5nbGUiLCJnZXRTdGF0dXNlc0xlbmd0aCIsImRhdGEiLCJ0cmFuc2l0aW9uYWxTdGF0dXMiLCJpbnN0YW5jZVN0YXR1c2VzIiwibGVuZ3RoIiwiZ2V0U3RhdHVzZXNIZWlnaHQiLCJzdGF0dXNlcyIsImNoaWxkcmVuIiwicmVkdWNlIiwiY2hpbGQiLCJzdGF0dXNIZWlnaHQiLCJnZXRDb250ZW50UmVjdCIsImlzQ2hpbGQiLCJjb250ZW50U2l6ZSIsImNoaWxkQ29udGVudFNpemUiLCJoZWlnaHQiLCJjb250ZW50SGVpZ2h0IiwiY29udGVudFBvc2l0aW9uIiwid2lkdGgiLCJnZXROb2RlUmVjdCIsIm5vZGVTaXplIiwibm9kZVNpemVXaXRoQ2hpbGRyZW4iLCJub2RlSGVpZ2h0Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLGFBQXRCOztBQUVBLElBQU1DLHFCQUFxQixTQUFyQkEsa0JBQXFCLENBQUNDLE1B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THdDOztBQU1oRCxNQUFNQyxnQkFBZ0JELFNBQVNWLGtCQUFrQkosSUFBbEIsQ0FBL0I7O0FBRUEsMkJBQ0t0QyxVQUFVc0QsZUFEZjtBQUVFQyxXQUFPTCxZQUFZSyxLQUZyQjtBQUdFSCxZQUFRQztBQUhWO0FBS0QsQ0FiRDs7QUFlQSxJQUFNRyxjQUFjLFNBQWRBLFdBQWMsT0FBUTtBQUMxQixNQUFNQyxXQUFXbkIsS0FBS00sUUFBTCxHQUNiNUMsVUFBVTBELG9CQURHLEdBRWIxRCxVQUFVeUQsUUFGZDs7QUFEMEIsTUFLbEJGLEtBTGtCLEdBS0FFLFFBTEEsQ0FLbEJGLEtBTGtCO0FBQUEsTUFLWEgsTUFMVyxHQUtBSyxRQUxBLENBS1hMLE1BTFc7O0FBTTFCLE1BQU1PLGFBQWFQLFNBQVNWLGtCQUFrQkosSUFBbEIsQ0FBNUI7O0FBRUEsU0FBTztBQUNMWixVQUFNLENBQUM2QixLQUFELEdBQVMsQ0FEVjtBQUVML0IsV0FBTytCLFFBQVEsQ0FGVjtBQUdMNUIsU0FBSyxDQUFDeUIsTUFBRCxHQUFVLENBSFY7QUFJTDNCLFlBQVFrQyxhQUFhUCxTQUFTLENBSnpCO0FBS0xHLGdCQUxLO0FBTUxILFlBQVFPO0FBTkgsR0FBUDtBQVFELENBaEJEOztBQWtCQSxTQUFTWCxjQUFULEVBQXlCUSxXQUF6QixFQUFzQzVCLG1CQUF0QyIsImZpbGUiOiJmdW5jdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgZ2V0QW5nbGVGcm9tUG9pbnRzID0gKHNvdXJjZSwgdGFyZ2V0KSA9PiB7XG4gIGNvbnN0IGxpbmVBbmdsZSA9IE1hdGguYXRhbjIodGFyZ2V0LnkgLSBzb3VyY2UueSwgdGFyZ2V0LnggLSBzb3VyY2UueCk7XG4gIGNvbnN0IGxpbmVBbmdsZURlZyA9IGxpbmVBbmdsZSAqIDE4MCAvIE1hdGguUEk7XG4gIGNvbnN0IHplcm9Ub1RocmVlU2l4dHkgPSBsaW5lQW5nbGVEZWcgPCAwID8gMzYwICsgbGluZUFuZ2xlRGVnIDogbGluZUFuZ2xlRGVnO1xuXG4gIHJldHVybiB6ZXJvVG9UaHJlZVNpeHR5O1xufTtcblxuY29uc3QgZ2V0UG9zaXRpb24gPSAoYW5nbGUsIHBvc2l0aW9ucywgcG9zaXRpb24sIG5vQ29ybmVycyA9IGZhbHNlKSA9PiB7XG4gIGNvbnN0IHBvc2l0aW9uSW5kZXggPSBub0Nvcm5lcnNcbiAgICA/IE1hdGgucm91bmQoYW5nbGUgLyA5MCkgKiAyXG4gICAgOiBNYXRoLnJvdW5kKGFuZ2xlIC8gNDUpO1xuXG4gIGNvbnN0IG9mZnNldFBvc2l0aW9uID0gcG9zaXRpb25zW3Bvc2l0aW9uSW5kZXhdO1xuXG4gIHJldHVybiB7XG4gICAgaWQ6IG9mZnNldFBvc2l0aW9uLmlkLFxuICAgIHg6IHBvc2l0aW9uLnggKyBvZmZzZXRQb3NpdGlvbi54LFxuICAgIHk6IHBvc2l0aW9uLnkgKyBvZmZzZXRQb3NpdGlvbi55XG4gIH07XG59O1xuXG5jb25zdCBnZXRQb3NpdGlvbnMgPSAocmVjdCwgaGFsZkNvcm5lciA9IDApID0+IFtcbiAge1xuICAgIGlkOiAncicsXG4gICAgeDogcmVjdC5yaWdodCxcbiAgICB5OiAwXG4gIH0sXG4gIHtcbiAgICBpZDogJ2JyJyxcbiAgICB4OiByZWN0LnJpZ2h0IC0gaGFsZkNvcm5lcixcbiAgICB5OiByZWN0LmJvdHRvbSAtIGhhbGZDb3JuZXJcbiAgfSxcbiAge1xuICAgIGlkOiAnYicsXG4gICAgeDogMCxcbiAgICB5OiByZWN0LmJvdHRvbVxuICB9LFxuICB7XG4gICAgaWQ6ICdibCcsXG4gICAgeDogcmVjdC5sZWZ0ICsgaGFsZkNvcm5lcixcbiAgICB5OiByZWN0LmJvdHRvbSAtIGhhbGZDb3JuZXJcbiAgfSxcbiAge1xuICAgIGlkOiAnbCcsXG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IDBcbiAgfSxcbiAge1xuICAgIGlkOiAndGwnLFxuICAgIHg6IHJlY3QubGVmdCArIGhhbGZDb3JuZXIsXG4gICAgeTogcmVjdC50b3AgKyBoYWxmQ29ybmVyXG4gIH0sXG4gIHtcbiAgICBpZDogJ3QnLFxuICAgIHg6IDAsXG4gICAgeTogcmVjdC50b3BcbiAgfSxcbiAge1xuICAgIGlkOiAndHInLFxuICAgIHg6IHJlY3QucmlnaHQgLSBoYWxmQ29ybmVyLFxuICAgIHk6IHJlY3QudG9wICsgaGFsZkNvcm5lclxuICB9LFxuICB7XG4gICAgaWQ6ICdyJyxcbiAgICB4OiByZWN0LnJpZ2h0LFxuICAgIHk6IDBcbiAgfVxuXTtcblxuY29uc3QgY2FsY3VsYXRlTGluZUxheW91dCA9ICh7IHNvdXJjZSwgdGFyZ2V0IH0pID0+IHtcbiAgLy8gQWN0dWFsbHksIHRoaXMgd2lsbCBuZWVkIHRvIGJlIGdvdCBkeW5hbWljYWxseSwgaW4gY2FzZSB0aGVtIHRoaW5ncyBhcmUgZGlmZmVyZW50IHNpemVzXG4gIC8vIHllYWggcmlnaHQsIG5vdyB5b3UnbGwgZ2V0IHRvIGRvIGV4YWN0bHkgdGhhdFxuXG4gIGNvbnN0IGhhbGZDb3JuZXIgPSAyO1xuXG4gIGNvbnN0IHNvdXJjZVBvc2l0aW9ucyA9IGdldFBvc2l0aW9ucyhzb3VyY2Uubm9kZVJlY3QsIGhhbGZDb3JuZXIpO1xuICBjb25zdCBzb3VyY2VBbmdsZSA9IGdldEFuZ2xlRnJvbVBvaW50cyhzb3VyY2UsIHRhcmdldCk7XG4gIGNvbnN0IHNvdXJjZVBvc2l0aW9uID0gZ2V0UG9zaXRpb24oc291cmNlQW5nbGUsIHNvdXJjZVBvc2l0aW9ucywgc291cmNlKTtcblxuICBjb25zdCB0YXJnZXRQb3NpdGlvbnMgPSBnZXRQb3NpdGlvbnModGFyZ2V0Lm5vZGVSZWN0LCBoYWxmQ29ybmVyKTtcbiAgY29uc3QgdGFyZ2V0QW5nbGUgPSBnZXRBbmdsZUZyb21Qb2ludHModGFyZ2V0LCBzb3VyY2VQb3NpdGlvbik7XG4gIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gZ2V0UG9zaXRpb24odGFyZ2V0QW5nbGUsIHRhcmdldFBvc2l0aW9ucywgdGFyZ2V0KTsgLy8gLCB0cnVlKTtcblxuICBjb25zdCBhcnJvd0FuZ2xlID0gZ2V0QW5nbGVGcm9tUG9pbnRzKHNvdXJjZVBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbik7XG5cbiAgcmV0dXJuIHtcbiAgICBzb3VyY2UsXG4gICAgdGFyZ2V0LFxuICAgIHNvdXJjZVBvc2l0aW9uLFxuICAgIHRhcmdldFBvc2l0aW9uLFxuICAgIGFycm93QW5nbGVcbiAgfTtcbn07XG5cbmNvbnN0IGdldFN0YXR1c2VzTGVuZ3RoID0gZGF0YSA9PlxuICBkYXRhLnRyYW5zaXRpb25hbFN0YXR1cyA/IDEgOiBkYXRhLmluc3RhbmNlU3RhdHVzZXMubGVuZ3RoO1xuXG5jb25zdCBnZXRTdGF0dXNlc0hlaWdodCA9IGRhdGEgPT4ge1xuICBjb25zdCBzdGF0dXNlcyA9IGRhdGEuY2hpbGRyZW5cbiAgICA/IGRhdGEuY2hpbGRyZW4ucmVkdWNlKFxuICAgICAgICAoc3RhdHVzZXMsIGNoaWxkKSA9PiBzdGF0dXNlcyArIGdldFN0YXR1c2VzTGVuZ3RoKGNoaWxkKSxcbiAgICAgICAgMFxuICAgICAgKVxuICAgIDogZ2V0U3RhdHVzZXNMZW5ndGgoZGF0YSk7XG5cbiAgcmV0dXJuIHN0YXR1c2VzID8gQ29uc3RhbnRzLnN0YXR1c0hlaWdodCAqIHN0YXR1c2VzICsgNiA6IDA7XG59O1xuXG5jb25zdCBnZXRDb250ZW50UmVjdCA9IChkYXRhLCBpc0NoaWxkID0gZmFsc2UpID0+IHtcbiAgY29uc3QgY29udGVudFNpemUgPSBpc0NoaWxkXG4gICAgPyBDb25zdGFudHMuY2hpbGRDb250ZW50U2l6ZVxuICAgIDogQ29uc3RhbnRzLmNvbnRlbnRTaXplO1xuXG4gIGNvbnN0IHsgaGVpZ2h0IH0gPSBjb250ZW50U2l6ZTtcbiAgY29uc3QgY29udGVudEhlaWdodCA9IGhlaWdodCArIGdldFN0YXR1c2VzSGVpZ2h0KGRhdGEpO1xuXG4gIHJldHVybiB7XG4gICAgLi4uQ29uc3RhbnRzLmNvbnRlbnRQb3NpdGlvbixcbiAgICB3aWR0aDogY29udGVudFNpemUud2lkdGgsXG4gICAgaGVpZ2h0OiBjb250ZW50SGVpZ2h0XG4gIH07XG59O1xuXG5jb25zdCBnZXROb2RlUmVjdCA9IGRhdGEgPT4ge1xuICBjb25zdCBub2RlU2l6ZSA9IGRhdGEuY2hpbGRyZW5cbiAgICA/IENvbnN0YW50cy5ub2RlU2l6ZVdpdGhDaGlsZHJlblxuICAgIDogQ29uc3RhbnRzLm5vZGVTaXplO1xuXG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gbm9kZVNpemU7XG4gIGNvbnN0IG5vZGVIZWlnaHQgPSBoZWlnaHQgKyBnZXRTdGF0dXNlc0hlaWdodChkYXRhKTtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IC13aWR0aCAvIDIsXG4gICAgcmlnaHQ6IHdpZHRoIC8gMixcbiAgICB0b3A6IC1oZWlnaHQgLyAyLFxuICAgIGJvdHRvbTogbm9kZUhlaWdodCAtIGhlaWdodCAvIDIsXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0OiBub2RlSGVpZ2h0XG4gIH07XG59O1xuXG5leHBvcnQgeyBnZXRDb250ZW50UmVjdCwgZ2V0Tm9kZVJlY3QsIGNhbGN1bGF0ZUxpbmVMYXlvdXQgfTtcbiJdfQ==