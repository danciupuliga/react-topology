import { forceSimulation, forceLink, forceCollide, forceCenter } from 'd3';
import Constants from './constants';

var hypotenuse = function hypotenuse(a, b) {
  return Math.sqrt(a * a + b * b);
};

var rectRadius = function rectRadius(_ref) {
  var width = _ref.width,
      height = _ref.height;
  return Math.round(hypotenuse(width, height) / 2);
};

var forcePlayAnimation = function forcePlayAnimation(simulation, animationTicks) {
  var n = Math.ceil(Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay())) + 100; // - animationTicks;

  for (var i = 0; i < n; ++i) {
    simulation.tick();
  }
};

var createLinks = function createLinks(services) {
  return services.reduce(function (acc, service, index) {
    return service.connections ? acc.concat(service.connections.reduce(function (connections, connection, index) {
      var targetExists = services.filter(function (service) {
        return service.id === connection;
      }).length;
      if (targetExists) {
        connections.push({
          source: service.id,
          target: connection
        });
      }
      return connections;
    }, [])) : acc;
  }, []);
};

var createSimulation = function createSimulation(services, svgSize) {
  var animationTicks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  // This is not going to work given that as well as the d3 layout stuff, other things might be at play too
  // We should pass two objects to the components - one for positioning and one for data
  var nodes = services.map(function (service, index) {
    return {
      id: service.id,
      index: index
    };
  });

  var links = createLinks(services);

  var width = svgSize.width,
      height = svgSize.height;


  var nodeRadius = rectRadius(Constants.nodeSizeWithChildren);

  var simulation = forceSimulation(nodes).force('link', forceLink(links).id(function (d) {
    return d.id;
  })).force('collide', forceCollide(nodeRadius)).force('center', forceCenter(width / 2, height / 2));

  forcePlayAnimation(simulation, animationTicks);

  return {
    nodes: nodes,
    links: links,
    simulation: simulation
  };
};

var updateSimulation = function updateSimulation(simulation, services, simNodes, simLinks, svgSize, onTick, onEnd) {
  var nodes = services.map(function (service, index) {
    var simNode = simNodes.reduce(function (acc, n, i) {
      return service.id === n.id ? n : acc;
    }, null);

    return simNode ? {
      id: simNode.id,
      index: index
    } : {
      id: service.id,
      index: index
    };
  });

  var links = createLinks(services);

  var width = svgSize.width,
      height = svgSize.height;


  var nodeRadius = rectRadius(Constants.nodeSizeWithChildren);

  return {
    simulation: forceSimulation(nodes).force('link', forceLink(links).id(function (d) {
      return d.id;
    })).force('collide', forceCollide(nodeRadius)).force('center', forceCenter(width / 2, height / 2)).on('tick', onTick).on('end', onEnd),
    nodes: nodes,
    links: links
  };
};

export { createSimulation, updateSimulation };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,